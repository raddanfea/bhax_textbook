<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Caesar!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title><type>int **</type> háromszögmátrix</title>
        <para>
           
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            A háromszög mátrix 2 tulajdonsággal rendelkezik,
            négyzetes, tehát sorai és oszlopai száma megegyezik,
            illetve, a főátlója alatt(vagy felett) csak nulla szerepel.
                
        </para>
        <mediaobject><imageobject> <imagedata fileref="harmoszogm.png" format="png" scale="70"/> </imageobject></mediaobject>
       
        <para>
            Létrehozunk egy egész számot és lefoglaljuk a **tm területét egy mutatóra mutató doubleként.
            A <function>malloc</function> függvény lefglalja a dinamikus területen a paramétereként kapott méretű területet.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
    int nr = 5;
    double **tm;
        ]]>
            </programlisting>
        </para>
        <para>
            Null értékeket keresünk and fn tartalmában ellenőrzésképp.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
if ((tm = (double **) malloc (nr * sizeof (double *))) == NULL)
    {
        return -1;
    }

    for (int i = 0; i < nr; ++i)
    {
        if ((tm[i] = (double *) malloc ((i + 1) * sizeof (double))) == NULL)
        {
            return -1;
        }

    }
        ]]>
            </programlisting>
        </para>
        <para>
            
        </para>
        <para>
            <programlisting language="c"><![CDATA[

        ]]>
            </programlisting>
        </para>        
    </section>        
    <section>
        <title>C EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót C-ben!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:   
            <programlisting language="c"><![CDATA[
﻿#include <stdio.h>
#include <unistd.h>
#include <string.h>

#define MAX_KULCS 100
#define BUFFER_MERET 256


int
main (int argc, char **argv)
{

  char kulcs[MAX_KULCS];
  char buffer[BUFFER_MERET];

  int kulcs_index = 0;
  int olvasott_bajtok = 0;

  int kulcs_meret = strlen (argv[1]);
  strncpy (kulcs, argv[1], MAX_KULCS);

  while ((olvasott_bajtok = read (0, (void *) buffer, BUFFER_MERET)))
    {

      for (int i = 0; i < olvasott_bajtok; ++i)
	{

	  buffer[i] = buffer[i] ^ kulcs[kulcs_index];
	  kulcs_index = (kulcs_index + 1) % kulcs_meret;

	}

      write (1, buffer, olvasott_bajtok);

    }
}
        ]]>
            </programlisting>             
        </para>
        <para>
            Az exor titkosítás egy relatív egyszerű folyamat. Az exor kapu a lenti részben fut le.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
            buffer[i] = buffer[i] ^ kulcs[kulcs_index];
        ]]>
            </programlisting>
        </para>
        <para>
            A program beolvassa a kulcsot és a bemeni fájlt. Az utóbbit bufferen kezeli hogy a fájl mérete ne okozzon gondot.
        </para>  
        <para>
            A bufferen lévő bájtokat egyessével átvezetjük az exor kapun ami matematikai logikával dönti el hogy meváltozik-e a bit.
        </para>
        <para>
            Mivel a kulcs több karakteres is lehet, ezt indexeljük és minden bitnél lépegetjük, amennyiben a végéhez érünk a kulcs indexelését az elejéről kezdjük
        </para>
        <para>
            Valahányszor a buffer végére érünk, kiiratjuk a módosított adatot a kimentre majd a fájl végének elérésig ismételjük a bufferelési és titkosítási processt.
        </para>
        <para>
            Ez a folyamat fordítva ugyanúgy működik, tehát ismétléskor ugyan az a jelszó megadásával az exor kapu a biteket az ereti állapotukra állítja vissza.
        </para>     
    </section>        
    <section>
        <title>Java EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót Java-ban!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            <programlisting language="c"><![CDATA[
    public class Titkosito {
    
    public Titkosito(String kulcsSzöveg,
            java.io.InputStream bejövőCsatorna,
            java.io.OutputStream kimenőCsatorna)
            throws java.io.IOException {
        
        byte [] kulcs = kulcsSzöveg.getBytes();
        byte [] buffer = new byte[256];
        int kulcsIndex = 0;
        int olvasottBájtok = 0;

        while((olvasottBájtok =
                bejövőCsatorna.read(buffer)) != -1) {
            
            for(int i=0; i<olvasottBájtok; ++i) {
                
                buffer[i] = (byte)(buffer[i] ^ kulcs[kulcsIndex]);
                kulcsIndex = (kulcsIndex+1) % kulcs.length;
                
            }
            
            kimenőCsatorna.write(buffer, 0, olvasottBájtok);
            
        }
        
    }
    
    public static void main(String[] args) {
        
        try {
            
            new Titkosito(args[0], System.in, System.out);
            
        } catch(java.io.IOException e) {
            
            e.printStackTrace();
            
        }
        
    }
    
}

        ]]>
            </programlisting>
        </para>
        <para>
            Az előző feldat java nyelven megírva.
            Bemeneti fájl helyett a Ctrl+D billentyűkombináció lenyomásáig várja az inputot a terminál.
            
        </para>            
    </section>        
    <section>
        <title>C EXOR törő</title>
        <para>
            Írj egy olyan C programot, amely megtöri az első feladatban előállított titkos szövegeket!
            
            
        </para>
        <para>
            A töréshez szükségünk lesz egy módszerre hogy eldöntsük mi is lehet a jó megoldás. Itt a szavak átlagos hosszát és a leggyakoribb magyar szavakat ellenőrizzük.
        </para>
        <para>
            Az átlagos szóhosszt a szókozök számából és a fájl hosszából állapíthatjuk meg. Ezt egy funkcióként fogjuk használni.               
        </para>
        <para>
            <programlisting language="c"><![CDATA[
        double
atlagos_szohossz (const char *titkos, int titkos_meret)
{
  int sz = 0;
  for (int i = 0; i < titkos_meret; ++i)
    if (titkos[i] == ' ')
      ++sz;

  return (double) titkos_meret / sz;
}
        ]]>
            </programlisting>
        </para>
        <para>
            Egy másik funkcióként lehívjuk ez előzőt majd végrehajtjuk az ellenőrzést. "and" kritériumokként hosszádjuk a leggyakoribb magyar szavak jelenlétét és a jó megoldást visszaadjuk.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
int
tiszta_lehet (const char *titkos, int titkos_meret)
{
  double szohossz = atlagos_szohossz (titkos, titkos_meret);

  return szohossz > 6.0 && szohossz < 9.0
    && strcasestr (titkos, "hogy") && strcasestr (titkos, "nem")
    && strcasestr (titkos, "az") && strcasestr (titkos, "ha");

}
        ]]>
            </programlisting>
        </para>
        <para>
            Bevezetjük fonkcióként a standard exort.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
            void
exor (const char kulcs[], int kulcs_meret, char titkos[], int titkos_meret)
{

  int kulcs_index = 0;

  for (int i = 0; i < titkos_meret; ++i)
    {

      titkos[i] = titkos[i] ^ kulcs[kulcs_index];
      kulcs_index = (kulcs_index + 1) % kulcs_meret;

    }

}
        ]]>
            </programlisting>
        </para>
        <para>
        Bevezetjük az exor törés funkciót ami kezeli az átadott információkat és az alatta lévő funkciók meghívását.
        </para>
        <para>
            <programlisting language="c"><![CDATA[

        ]]>
            </programlisting>
        </para>  
        <para>
            Az exorhoz hasonlóan kezeljük a beolvasási buffert.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
            
  char kulcs[KULCS_MERET];
  char titkos[MAX_TITKOS];
  char *p = titkos;
  int olvasott_bajtok;

  // titkos fajt berantasa
  while ((olvasott_bajtok =
	  read (0, (void *) p,
		(p - titkos + OLVASAS_BUFFER <
		 MAX_TITKOS) ? OLVASAS_BUFFER : titkos + MAX_TITKOS - p)))
    p += olvasott_bajtok;

        ]]>
            </programlisting>
        </para>  
        <para>
        A jelszó töréshez felhasználandó karaktereket itt tároljuk.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
    char chars[]={'k','*','/','a','g',',','-','%','\0'};
        ]]>
            </programlisting>
        </para>  
        <para>
            Egy mély for ciklus generálja az éppen kipróbált kulcsot.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
for (int ii = 0; ii < 8; ++ii)
    for (int ji = 0; ji < 8; ++ji)
        for (int ki = 0; ki < 8; ++ki)
            for (int li = 0; li < 8; ++li)
                for (int mi = 0; mi < 8; ++mi)
                    for (int ni = 0; ni < 8; ++ni)
                        for (int oi = 0; oi < 8; ++oi)
                            for (int pi = 0; pi < 8; ++pi)
		  {
		    kulcs[0] = chars[ii];
		    kulcs[1] = chars[ji];
		    kulcs[2] = chars[ki];
		    kulcs[3] = chars[li];
		    kulcs[4] = chars[mi];
		    kulcs[5] = chars[ni];
		    kulcs[6] = chars[oi];
		    kulcs[7] = chars[pi];
        ]]>
            </programlisting>
        </para>
        <para>
            Meghívjuk az exor törés funkciót és amenyiben találunk megoldást, kiírjuk a megfelelő jelszót és a megoldást.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
if (exor_tores (kulcs, KULCS_MERET, titkos, p - titkos))
		      printf("Kulcs: [%c%c%c%c%c%c%c%c]\nTiszta szoveg: [%s]\n",chars[ii], chars[ji], chars[ki], chars[li], chars[mi], chars[ni], chars[oi], chars[pi],	titkos);
 exor (kulcs, KULCS_MERET, titkos, p - titkos);        
]]>
            </programlisting>
        </para> 
     
    </section>        
    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
        <para>
            R
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Koyw6IH5ScQ">https://youtu.be/Koyw6IH5ScQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R</link>               
        </para>
        <para>
            A neuron az elektromos jelek feldolgozásáért felelős agysejt.
            Az agy információfeldolgozó kapacitása a neuronok hálózatából alakult ki.
            Neurális hálónak nevezzük azt a párhuzamos működésre képes információfeldolgozó eszközt, amely nagyszámú, hasonló típusú elem összekapcsolt rendszeréből áll.
            Jellemzője az is, hogy rendelkezik tanulási algoritmussal és képes használni a megtanult információt.
        </para>
        
        <para>
            A programhoz szükségünk van az R nyelvre és a neuralnet package-re.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
$ more neuralis.r
library(neuralnet)

a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)

or.data <- data.frame(a1, a2, OR)

nn.or <- neuralnet(OR~a1+a2, or.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.or)

compute(nn.or, or.data[,1:2])

a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)
AND   <- c(0,0,0,1)

orand.data <- data.frame(a1, a2, OR, AND)

nn.orand <- neuralnet(OR+AND~a1+a2, orand.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.orand)

compute(nn.orand, orand.data[,1:2])

a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)

exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])

a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)

exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=c(6, 4, 6), linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])

        ]]>
            </programlisting>
        </para> 
        <para>
            'a1' és 'a2' értékeket tartalmaz, az OR pedig a logikai 'VAGY' műveletet jelöli. A program előre meghatározott szabályok alapján tanul.
            A <function>compute</function> parancs segítségével tudjuk leellenőrizni, hogy a megfelelő eredményeket kaptuk-e.
            A logikai 'ÉS' művelet (and) ugyan így történik.
            Az 'EXOR' műveletnél csak többrétegű neuronokkal lehetséges a tanítás (hidden = 2).
        </para>            
    </section>        
    <section>
        <title>Hiba-visszaterjesztéses perceptron</title>
        <para>
            C++
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Caesar/Perceptron">https://gitlab.com/whoisZORZ/bhax/tree/master/attention_raising/Caesar/Perceptron</link>                
        </para>
        <para>
        A Benoît Mandelbrot nevéhez köthető Mandelbrot-halmaz a komplex számsíkon ábrázolva egy fraktálalakzatot jelent. 
        A kétdimenziós halmaz png képábráját fogjuk létrehozni a <filename>mandel.cpp</filename> file segítségével.
        </para> 
                <para>
                    Szükségünk van a 'libpng-dev' és 'libpng++-dev' -ra és a hivatalos png++ headerre.
            <programlisting language="c"><![CDATA[
#include <iostream>
#include "mlp.hpp"
#include <png++/png.hpp>

int main (int argc, char **argv)
{
	png::image <png::rgb_pixel> png_image (argv[1]);
	int size = png_image.get_width() *png_image.get_height();
	Perceptron* p = new Perceptron (3, size, 256, 1);
	double* image = new double[size];
	for (int i {0}; i<png_image.get_width(); ++i)
		for (int j {0}; j<png_image.get_height(); ++j)
			image[i*png_image.get_width() +j] = png_image[i][j].red;
	double value = (*p) (image);
	std::cout << value << std::endl;
	delete p;
	delete [] image;
}

$ g++ mlp.hpp main.cpp -o perc -lpng -std=c++11
$ ./perc mandel.png
0.731059
        ]]>
            </programlisting>
        </para>
        <mediaobject><imageobject> <imagedata fileref="mandel.png" format="png" scale="60"/> </imageobject></mediaobject>            
    </section>        
        

</chapter>                

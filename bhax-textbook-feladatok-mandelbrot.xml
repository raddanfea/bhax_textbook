<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>A Mandelbrot halmaz</title>
        <para>
            Forrás: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Mandelbrot/3.1.2.cpp">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Mandelbrot/3.1.2.cpp</link> 
        </para>
        <para>
         A Mandelbrot-halmaz elemei komplex számok, amiken a:
                x1:=c, c -> komplex szám
                xn+1:=(xn)^2 +c
        sorozat, rekurzív, korlátos.       
        </para>
        <para>
            Ennek a halmaznak elemeit ábrázolva a komplex számsíkon (mi esetünkben képfájlba) egy fraktálalakzatot
kapunk.
        </para>
        <para>
          A képlet megadására az alábbi függvényt is használjuk.
        </para>
        <para>
        f(z) = z^2 + c
        </para>
        <para>
            <programlisting language="c"><![CDATA[
#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

  int szelesseg = 1920;
  int magassag = 1080;
  int iteraciosHatar = 255;
  double a = -1.9;
  double b = 0.7;
  double c = -1.3;
  double d = 1.3;

  if ( argc == 9 )
    {
      szelesseg = atoi ( argv[2] );
      magassag =  atoi ( argv[3] );
      iteraciosHatar =  atoi ( argv[4] );
      a = atof ( argv[5] );
      b = atof ( argv[6] );
      c = atof ( argv[7] );
      d = atof ( argv[8] );
    }
  else
    {
      std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d" << std::endl;
      return -1;
    }

  png::image < png::rgb_pixel > kep ( szelesseg, magassag );

  double dx = ( b - a ) / szelesseg;
  double dy = ( d - c ) / magassag;
  double reC, imC, reZ, imZ;
  int iteracio = 0;

  std::cout << "Szamitas\n";

  // j megy a sorokon
  for ( int j = 0; j < magassag; ++j )
    {
      // k megy az oszlopokon

      for ( int k = 0; k < szelesseg; ++k )
        {

          // c = (reC, imC) a halo racspontjainak
          // megfelelo komplex szam

          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC );

          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;

          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {
              z_n = z_n * z_n + c;

              ++iteracio;
            }

          kep.set_pixel ( k, j,
                          png::rgb_pixel ( iteracio%255, (iteracio*iteracio)%255, 0 ) );
        }

      int szazalek = ( double ) j / ( double ) magassag * 100.0;
      std::cout << "\r" << szazalek << "%" << std::flush;
    }

  kep.write ( argv[1] );
  std::cout << "\r" << argv[1] << " mentve." << std::endl;

}

        ]]>
            </programlisting>
        </para>
        <para>
            A mandel egy kétdimenziós tömböt kér be amit egy megadott mátrixba helyezünk bele. 
            Minden pixelre kiszámoljuk hogy része-e a Mandelbrot halmaznak, 
            addig fut a függvény amig el nem érjük az iterációs határt. 
            Miután kiszámoltuk a kép adatait png fájlá alakitjuk.
        </para>
        <mediaobject><imageobject> <imagedata fileref="mandel.png" format="png" scale="60"/> </imageobject></mediaobject>
    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
            <programlisting language="c"><![CDATA[
            #include <complex>
            ]]>
            </programlisting>
            Meghivjuk a complex headert.
        </para>
        <para>
            A mainben deklarálnunk kell a szükséges adatokat és ott kezeljük a fájlt hasonlóan az előző feladathoz. 
            Az 'argc' az argumentumok számát, mig az 'argv' a tömb elemeit fogja tartalmazni.
            Az 'atoi' függvény a bemenetet egésszé, az 'atof' függvény pedig pointerré alakitja.
            Az std::complex fogja kezelni a nem valós számokat.
        </para> 
        
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf</link>
        </para>
        <para>
            Egy Mandelbrotos-halmazhoz hasonló halmaz, a Júlia-halmaz vizsgálata alapján eloállt algoritmus.
        </para>  
        <para>
            A 2. for-ban számoljuk ki a rácsponthoz a komplex értéket, létrehozzuk 0 keződértékkel az <varname>iteracio</varname> változót,
            aztán indul még egy for ciklus, ami 0-tól megy iteraciosHatar -ig.
        </para>
        <para>
            Itt alkalmazzuk a rekurzív sorozatunkat, majd vizsgáljuk, hogy az eredmény valós vagy képzetes része átlépte-e az <varname>R</varname>-ben megadott értéket, ha igen,
            akkor az iteracio -ba eltesszük az i-t, és kilépünk a ciklusból.
        </para>

        <para>
            <programlisting language="c"><![CDATA[
#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

    int szelesseg = 1920;
    int magassag = 1080;
    int iteraciosHatar = 255;
    double xmin = -1.9;
    double xmax = 0.7;
    double ymin = -1.3;
    double ymax = 1.3;
    double reC = .285, imC = 0;
    double R = 10.0;

    if ( argc == 12 )
    {
        szelesseg = atoi ( argv[2] );
        magassag =  atoi ( argv[3] );
        iteraciosHatar =  atoi ( argv[4] );
        xmin = atof ( argv[5] );
        xmax = atof ( argv[6] );
        ymin = atof ( argv[7] );
        ymax = atof ( argv[8] );
        reC = atof ( argv[9] );
        imC = atof ( argv[10] );
        R = atof ( argv[11] );

    }
    else
    {
        std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d reC imC R" << std::endl;
        return -1;
    }

    png::image < png::rgb_pixel > kep ( szelesseg, magassag );

    double dx = ( xmax - xmin ) / szelesseg;
    double dy = ( ymax - ymin ) / magassag;

    std::complex<double> cc ( reC, imC );

    std::cout << "Szamitas\n";

    // j megy a sorokon
    for ( int y = 0; y < magassag; ++y )
    {
        // k megy az oszlopokon

        for ( int x = 0; x < szelesseg; ++x )
        {

            double reZ = xmin + x * dx;
            double imZ = ymax - y * dy;
            std::complex<double> z_n ( reZ, imZ );

            int iteracio = 0;
            for (int i=0; i < iteraciosHatar; ++i)
            {

                z_n = std::pow(z_n, 3) + cc;
                //z_n = std::pow(z_n, 2) + std::sin(z_n) + cc;
                if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                {
                    iteracio = i;
                    break;
                }
            }

            kep.set_pixel ( x, y,
                            png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 ));
        }

        int szazalek = ( double ) y / ( double ) magassag * 100.0;
        std::cout << "\r" << szazalek << "%" << std::flush;
    }

    kep.write ( argv[1] );
    std::cout << "\r" << argv[1] << " mentve." << std::endl;

}

]]>
            </programlisting>
            </para>  
        <para>
            For ciklussal számolunk amely az iterációs határig fut.
        </para>                        
    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
         <para>
         Forrás: GNU Public License Ben Hiller <link xlink:href="https://github.com/benhiller/cuda-mandelbrot">https://github.com/benhiller/cuda-mandelbrot</link>
        </para>
        <para>
            Az elező Mandelbrot feladatoknál a CPU-t használtuk fel a számitásra, mig most a videókártyánkat fogjuk.
            A GPU rengeteg számitást végez párhuzamosan amely grafikai problémák megoldására sokkal hatékonyabb.
            Itt au nvidia CUDA technológiáját fogjuk felhasználni. Eheu kell a CUDA toolkit linuxunkra.
        </para>
        
        <para>
           Létrehozunk egy megadott szélességü rácsot és mendegyiket egy külön CUDA maggal számoljuk ki párhuzamosan.
           A cudaMalloc függvény foglalja nekünk le a vramot GPU-nkból.
           A forrásfájlt az nvcc-vel tudjuk lefuttatni. Ez a folyamat másodpercek alatt lefut és ugyan azt az eredményt adja.
            
        </para>
        <para>
            <programlisting language="c"><![CDATA[
#include <png++/image.hpp>
#include <png++/rgb_pixel.hpp>
#include <sys/times.h>
#include <iostream>
#define SIZE 600
#define ITERATION_LIMIT 32000
__device__ int
mandel (int k, int j)
{
// Végigzongorázza a CUDA a szélesség x magasság rácsot:
// most eppen a j. sor k. oszlopaban vagyunk
// számítás adatai
float a = -2.0, b = .7, c = -1.35, d = 1.35;
int width = SIZE, height = SIZE, iterationLimit = ITERATION_LIMIT;
// a számítás
float dx = (b - a) / width;
float dy = (d - c) / height;
float reC, imC, reZ, imZ, ujreZ, ujimZ;
// Hány iterációt csináltunk?
int iteration = 0;
// c = (reC, imC) a rács csomópontjainak
// megfelel˝o komplex szám
reC = a + k * dx;
imC = d - j * dy;
// z_0 = 0 = (reZ, imZ)
reZ = 0.0;
imZ = 0.0;
iteration = 0;
// z_{n+1} = z_n * z_n + c iterációk
// számítása, amíg |z_n| < 2 vagy még
// nem értük el a 255 iterációt, ha
// viszont elértük, akkor úgy vesszük,
// hogy a kiinduláci c komplex számra
// az iteráció konvergens, azaz a c a
// Mandelbrot halmaz eleme
while (reZ * reZ + imZ * imZ < 4 && iteration < iterationLimit)
    {
    // z_{n+1} = z_n * z_n + c
    ujreZ = reZ * reZ - imZ * imZ + reC;
    ujimZ = 2 * reZ * imZ + imC;
    reZ = ujreZ;
    imZ = ujimZ;
    ++iteration;
    }
return iteration;
}
/*
__global__ void
mandelkernel (int *buffer)
{
int j = blockIdx.x;
int k = blockIdx.y;
buffer[j + k * SIZE] = mandel (j, k);
}
*/
__global__ void
mandelkernel (int *buffer)
{
int tj = threadIdx.x;
int tk = threadIdx.y;
int j = blockIdx.x * 10 + tj;
int k = blockIdx.y * 10 + tk;
buffer[j + k * SIZE] = mandel (j, k);
}
void
cudamandel (int buffer[SIZE][SIZE])
{
int *deviceImageBuffer;
cudaMalloc ((void **) &deviceImageBuffer, SIZE * SIZE * sizeof (int));
// dim3 grid (SIZE, SIZE);
// mandelkernel <<< grid, 1 >>> (deviceImageBuffer);
dim3 grid (SIZE / 10, SIZE / 10);
dim3 tgrid (10, 10);
mandelkernel <<< grid, tgrid >>> (deviceImageBuffer);
cudaMemcpy (buffer, deviceImageBuffer,
SIZE * SIZE * sizeof (int), cudaMemcpyDeviceToHost);
cudaFree (deviceImageBuffer);
}
int
main (int argc, char *argv[])
{
// Mérünk id˝ot (PP 64)
clock_t delta = clock ();
// Mérünk id˝ot (PP 66)
struct tms tmsbuf1, tmsbuf2;
times (&tmsbuf1);
if (argc != 2)
    {
    std::cout << "Hasznalat: ./mandelpngc fajlnev";
    return -1;
    }
int buffer[SIZE][SIZE];
cudamandel (buffer);
png::image < png::rgb_pixel > image (SIZE, SIZE);
for (int j = 0; j < SIZE; ++j)
    {
    //sor = j;
    for (int k = 0; k < SIZE; ++k)
        {
        image.set_pixel (k, j,
        png::rgb_pixel (255 -
        (255 * buffer[j][k]) / ITERATION_LIMIT,
        255 -
        (255 * buffer[j][k]) / ITERATION_LIMIT,
        255 -
        (255 * buffer[j][k]) / ITERATION_LIMIT));
        }
    }
image.write (argv[1]);
std::cout << argv[1] << " mentve" << std::endl;
times (&tmsbuf2);
std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
+ tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;
delta = clock () - delta;
std::cout << (float) delta / CLOCKS_PER_SEC << " sec" << std::endl;
}
 
]]>
            </programlisting>
        </para>
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta komplex számokat!
        </para>
        <para>
        Forrás: GNU Public License Sully Chen <link xlink:href="https://github.com/SullyChen/Mandelbrot-Set-Plotter/blob/master/MandelbrotSetPlotter.cpp">https://github.com/SullyChen/Mandelbrot-Set-Plotter/blob/master/MandelbrotSetPlotter.cpp</link>
        </para> 
        <para>
            A program beolvassa a fájlt és képes azt az ablakban kezelni. Ay egér kattintására annak pozicióját lekéri és mozgatja az ablakot. 
        </para> 
        <para>
            
            <programlisting language="c"><![CDATA[
                #include "SFML/Graphics.hpp"

//resolution of the window
const int width = 1280;
const int height = 720;

//used for complex numbers
struct complex_number
{
    long double real;
    long double imaginary;
};

void generate_mandelbrot_set(sf::VertexArray& vertexarray, int pixel_shift_x, int pixel_shift_y, int precision, float zoom)
{
#pragma omp parallel for
    for(int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
            //scale the pixel location to the complex plane for calculations
            long double x = ((long double)j - pixel_shift_x) / zoom;
            long double y = ((long double)i - pixel_shift_y) / zoom;
            complex_number c;
            c.real = x;
            c.imaginary = y;
            complex_number z = c;
            int iterations = 0; //keep track of the number of iterations
            for (int k = 0; k < precision; k++)
            {
                complex_number z2;
                z2.real = z.real * z.real - z.imaginary * z.imaginary;
                z2.imaginary = 2 * z.real * z.imaginary;
                z2.real += c.real;
                z2.imaginary += c.imaginary;
                z = z2;
                iterations++;
                if (z.real * z.real + z.imaginary * z.imaginary > 4)
                    break;
            }
            //color pixel based on the number of iterations
            if (iterations < precision / 4.0f)
            {
                vertexarray[i*width + j].position = sf::Vector2f(j, i);
                sf::Color color(iterations * 255.0f / (precision / 4.0f), 0, 0);
                vertexarray[i*width + j].color = color;
            }
            else if (iterations < precision / 2.0f)
            {
                vertexarray[i*width + j].position = sf::Vector2f(j, i);
                sf::Color color(0, iterations * 255.0f / (precision / 2.0f), 0);
                vertexarray[i*width + j].color = color;
            }
            else if (iterations < precision)
            {
                vertexarray[i*width + j].position = sf::Vector2f(j, i);
                sf::Color color(0, 0, iterations * 255.0f / precision);
                vertexarray[i*width + j].color = color;
            }
        }
    }
}

int main()
{
    sf::String title_string = "Mandelbrot Set Plotter";
    sf::RenderWindow window(sf::VideoMode(width, height), title_string);
    window.setFramerateLimit(30);
    sf::VertexArray pointmap(sf::Points, width * height);
    
    float zoom = 300.0f;
    int precision = 100;
    int x_shift = width / 2;
    int y_shift = height / 2;
    
    generate_mandelbrot_set(pointmap, x_shift, y_shift, precision, zoom);
    
    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }
        
        //zoom into area that is left clicked
        if (sf::Mouse::isButtonPressed(sf::Mouse::Left))
        {
            sf::Vector2i position = sf::Mouse::getPosition(window);
            x_shift -= position.x - x_shift;
            y_shift -= position.y - y_shift;
            zoom *= 2;
            precision += 200;
#pragma omp parallel for
            for (int i = 0; i < width*height; i++)
            {
                pointmap[i].color = sf::Color::Black;
            }
            generate_mandelbrot_set(pointmap, x_shift, y_shift, precision, zoom);
        }
        window.clear();
        window.draw(pointmap);
        window.display();
    }
    
    return 0;
}
]]>
            </programlisting>  
        </para>
    </section>        

</chapter>                

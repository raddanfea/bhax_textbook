<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:
        </para>
        <para>
            <link xlink:href="https://github.com/raddanfea/prog1/blob/master/vcik1mag">Egy mag 100%  </link>
        </para>
        <para>
            <link xlink:href="https://github.com/raddanfea/prog1/blob/master/sleep">Egy mag 0%  </link>
        </para>
        <para>
            <link xlink:href="https://github.com/raddanfea/prog1/blob/master/vciklpara">Osszes mag 100%  </link> Ehhez szukseges az openmp hasznalata.
        </para>
        <para>
            Ha egy felamatot elaltatunk, a mag 0% terhelt lesz.
            Ha egy vegtelen ciklust futtatunk a mag 100% terhelt lesz.
            Ha egy vegtelent ciklust paralell futtatunk minden magon, minden mag 100% terhelt lesz.
        </para>            
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Tegyük fel, hogy létezik olyan program (T100), ami el tudja dönteni egy másik programról, hogy van-e benne végtelen ciklus.
            Ha van, akkor megáll a program, ha nincs, akkor pedig végtelen ciklusba kezd. Létrehozunk egy új programot (T1000) az előzőt (T100)
            felhasználva és ha a T100 megállt, akkor végtelen ciklusba kezd, ha pedig a T100 kezdett végtelen ciklusba, akkor megáll.
        </para>
         <para>
             A megállás csak akkor lehetséges, ha a T100 nem áll meg, de ez pedig csak akkor lehet, ha a második argumentumként kapott saját programunk megáll.
         </para>
         <para>Ebből ellentmondásra jutottunk, tehát nem lehet ilyen programot írni.</para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/raddanfea/prog1/blob/master/valtfelcs">Valtozo felcserelesek  </link>
        </para>
        <para>
            Uj valtozoval: Bevezetunk egy uj valtozot amire "elmentjuk" az 'a' valtozon tarolt informaciot. Ekkor 'a' valtozot felulirhatjuk 'b' valtozoval majd a 'b' valtozot az uj valtozoval.
        </para>
        <para>
            Uj valtozo nelkul: Osszeadjuk a ket valtozot es magkapjuk az osszeguket az egyik valtozon(itt 'a'). A masik valtozon(itt 'b') kivinjuk az osszegbol('a') a 'b' valtozot, a maradek 'a' eredeti erteke lesz. Ez utan az osszeget tartalmazo valtozon('a') kivonuk az onmagambol 'b' erteket, ami jelenleg 'a' eredeti erteke, igy megkapjuk a 'b' eredeti erteket.        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/raddanfea/prog1/blob/master/labdapattogtatas">Labdapattogtatas  </link>
        </para>
        <para>
        Megjegyzes: Minden esetben felvesszuk a kodhoz szukseges headert, amit a forrasban meg lehet talalni.
        </para>
        <para>
        Elkeszitjuk az ablakot a terminalbol es felvesszuk az adatait.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
        WINDOW *ablak;
        ablak = initscr ();
        ]]>
    </programlisting>   
        </para>
        <para>
            Egy vegtelen for ciklusba fog a program futni, ugyanis nem lesz szukseg a labda megallitasara.
        </para>
        <para>
            Felveszunk ket valtozot (a for cikluson kivul) az ablak (x,y) meretenek tarolasara majd belementjuk az erteket minden cilusban. Ezt a forrasban megfeleztuk hogy csak az ablak feleig dolgozzunk.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
        getmaxyx ( ablak, amy , amx );
        ]]>
            </programlisting>
        </para>
        <para>
            Egyszeru forciklussal megrajzoljuk a hatarertekeket tetszoleges karakterekekkel, illetve a ket maxertekkel a legtavalobbi pontot, az ellentkezo sarkot.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
        for(int a = 0;a<amx;a++){mvprintw ( amy, a, "=" );}
        for(int b = 0;b<amy;b++){mvprintw ( b, amx, "|" );}
        mvprintw ( amy, amx, "/" );
        ]]>
            </programlisting>
        </para>
        <para>
            Felveszunk ket uj valtozot a labda X,Y ertekeinek tarolasara a vegtelen cikluson kivul. Ez a labda kezdoerteke. Felrajzoljuk a labdat a jelenlegi poziciojara majd frissitjuk az ablakot, varunk hogy a mozgas emberi szemmel is eszlelheto legyen majd eltoroljuk az ablakon megjelenitett elemeket.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
        mvprintw ( y, x, "O" );
        refresh ();
        usleep (100000);
        clear();
        ]]>
            </programlisting>
        </para>
        <para>
            Felveszunk ket uj valtozot a labda mozgasi sebessege meghatarozasara es hozzaadjuk az erteket az elozo poziciohoz.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
        x = x + xmo;
        y = y + ymo;
        ]]>
            </programlisting>
        </para>
        <para>
            Egyszeru if fugvennyel ellenorizzuk hogy elerte-e a labda a hatarerteket. Ha elerte a sebesseget reciprokara allitjuk, ezzel a labda mozgasat az ellentkezo iranyba megforditva.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
        if ( x>=amx-1 ) {xmo = xmo * -1;}
        if ( x<=0 ) {xmo = xmo * -1;}
        if ( y<=0 ) {ymo = ymo * -1;}
        if ( y>=amy-1 ) {ymo = ymo * -1;}
        ]]>
            </programlisting>
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás forrása: 
            <programlisting language="c"><![CDATA[
#include <stdio.h>
int
main (void)
{
  int h = 0;
  int n = 0x01;
  do
    ++h;
  while (n <<= 1);
  printf ("A szohossz ezen a gepen: %d bites\n", h);
  return 0;
}
    }]]>
            </programlisting>
        </para>
        <para>
            Az egy erteku valtozot a bitshift operatorral eltoljuk amig lehet es minden lepest megszamolunk. Az eremeny az ertek bit erteku merete.
        </para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/raddanfea/prog1/blob/master/pagerank">Pagerank  </link>
        </para>
        <para>
            Az alabbi funkcio kiirja a belevezettet ertekeket erkezesi sorrend szerint szazados helyiertekig.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
void kiir (double tomb[], int db)
    {
    for(short i = 0; i < db; ++i)
    printf("%.2f \n",tomb[i]);
    }
        ]]>
            </programlisting>
        </para>
        <para>
            Az alabbi funkcio kiszamolja a PageRank es a haterertek tavolsagat majd visszaadja azt double ertekkent.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
double tavolsag (double PR[], double PRv[], int n)
{
   int i;
   double osszeg = 0;
   
   for (i = 0; i < n; ++i)
     osszeg += (PRv[i] - PR[i]) * (PRv[i] - PR[i]);
   
   return sqrt(osszeg);
}
        ]]>
            </programlisting>
        </para>
        <para>
            A main-ben felvesszuk az odlalak linkjeinek szamat matrixkent, illetve a pagerankot es a hatarerteket vektorkent.
        </para>
        <para>
            Egy for fuggvenyben elkezdjuk a szamolast. Ezenbelul dupla for fugvennyel osszehasonlitjuk a matrix minden koordinataja felhasznalasaval a page "josagat".
        </para>
        <para>
            <programlisting language="c"><![CDATA[
for(i = 0; i < 4; ++i)
    {
        PR[i] = 0.0;
        for(j = 0; j < 4; ++j)
        PR[i] += (L[i][j] * PRv[j]);
    }]]>
            </programlisting>
        </para>
         <para>
            Amennyiben a kulonbseg kisebb mint 0.00000001 akkor kilépünk a végtelen ciklusból, ha nem PRv-t feltoltjuk PR elemeivel. Vegul kiiratjuk az erteket.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
if(tavolsag (PR, PRv, 4) < 0.00000001)
      break;
    }]]>
            </programlisting>
        </para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
        
        <para>
            <programlisting language="c"><![CDATA[stp <- function(x){

    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}

    ]]>
            </programlisting>
        </para>
        <para>
            1. sor kiszamolja a primeket x-ig.
        </para>
        <para>
            2. sor az egymást követő prímek különbségét veszi. 3-2, 5-3, 7-5, 11-7, 13-11.
        </para>
        <para>
            3. sor megnezi hol 2 a kulonbseg. Ahol igaz, azok ikerprim parok.
        </para>
        <para>
            4. sor a par elso tagjat eltarolja.
        </para>
        <para>
            5. sor a masodik tagot az elso+2 vel kepzi es tarolja.
        </para>
        <para>
            Vegul reciprokokat kepez, osszeadja oket majd visszaadja az erteket.
        </para>
        <para>
            A forras tovabbi reszeben kirajzoltatjuk és lathatjuk, hogy egy felso hatarhoz konvergalnak az osszegek.
        </para>
        
        
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <para>
          A program veletlen eseteket general. Meghatarozzuk akiserletek szamat majd a jatekos vektorban veletlenszeruen megadjuk mit valaszt esetenkent. A musorvezeto vektora a kiserletek szama.
        </para>
        <para>
            Egy for ciklussal vegig megyunk a kiserletek szaman es megnezzuk hogy eltalata e az eredmenyt.
        </para>
        <para>
           Ha nem talalta el, a musorvezeto kap pontot.
        </para>
        <para>
           Kiertekeljuk hogy hanyszor nyert valtoztatassal, illetve nelkule.
        </para>
        <para>
           Kiiratjuk az eredmenyeket..
        </para>
    </section>

</chapter>                

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Welch!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Első osztályom</title>
        <para>
            Valósítsd meg C++-ban és Java-ban az módosított polártranszformációs algoritmust! A matek háttér 
            teljesen irreleváns, csak annyiban érdekes, hogy az algoritmus egy számítása során két normálist
            számol ki, az egyiket elspájzolod és egy további logikai taggal az osztályban jelzed, hogy van vagy
            nincs eltéve kiszámolt szám.
        </para>
        <para>
         Megoldás forrás: <link xlink:href="https://github.com/raddanfea/prog1/blob/master/polt">https://github.com/raddanfea/prog1/blob/master/polt</link>
        </para>
        <para>
         Létrehozzuk a random osztályt, hoyyá konstuktort és destrutort. Felvesszük privát és public értékeinket és fügvényeinket.
         Két számot generálunk, egyiket tároljuk valueben, másikat a get() függvény visszaadja. Végén 10 random számot generálunk.
        </para>
        <para>
            <programlisting language="c"><![CDATA[
#include <iostream>
#include <cstdlib>	
#include <cmath>	
#include <ctime>	



class Random {

	public:
		Random();
		~Random(){} 
		double get(); 

	private:
		bool exist; 
		double value; 
};


Random::Random() {
	exist = false;
	std::srand (std::time(NULL));
};


double Random::get() { 
	if (!exist)
	{
	double u1, u2, v1, v2, w;
		
		do{
			u1 = std::rand () / (RAND_MAX + 10.0); 
			u2 = std::rand () / (RAND_MAX + 1.0);
			v1 = 2 * u1 - 1;
			v2 = 2 * u2 - 1;
			w = v1 * v1 + v2 * v2;
		    }
		while (w > 1);

		double r = std::sqrt ((-2 * std::log (w)) / w);

		value = r * v2; 
		exist = !exist;
		return r * v1; 
	}
	else
	{	
		return value;
		exist = !exist;
	}
};    
int main() 
{
	Random rnd;

	for (int i = 0; i < 10; ++i) 
		std::cout << rnd.get() << std::endl; 

}
]]>
            </programlisting>
        </para> 
        <para>
        Az objektumorientált programozás (OOP) olyan módszert nyújt a programozók számára, 
        amely lehetővé teszi a programok bonyolultságának csökkentését, a megbízhatóság és a hatékonyság növelését.
        Objektumokból, a valós világ elemeinek programozási modelljeiből építi fel a programot.

        </para>  
        <para>
            Osztályokatat definiálhatjuk változókkal és funkciókkal amelyet konstruktorként meghivhatunk létrehozva egy példányt az osztály mintájára.
            Megszabhatjuk hogy honna érhető el egy funkció vagy változó az osztályban. Lehet protected, private vagy public.
        </para>              
    </section>        

    <section>
        <title>LZW</title>
        <para>
            Valósítsd meg C-ben az LZW algoritmus fa-építését!
        </para>
        <para>
         Megoldás forrás: <link xlink:href="https://github.com/raddanfea/prog1/blob/master/lzw_v9">https://github.com/raddanfea/prog1/blob/master/lzw_v9</link>
        </para>
        <para>
             Az LZW (Lempel-Ziv-Welch) tömörítési algoritmust Terry Welch amerikai informatikus publikálta 1984-ben. 
             A kiírásra kerülô kódok általában 12 bitesek, így a sztringtáblába 4096 bejegyzés fér. 
             Az elsô 256 bejegyzésbe elôzôleg az egyszerû ASCII karakterek, 256-tól 4095-ig pedig a tömörítés során a byte-csoportok kerülnek.  
       </para>
        <para>
             Szükség lesz egy rekordra, amely a fának az elemeit tartalmazza.
             Lesznek bal oldali gyermeikei, amelyekben 0-k fognak szerepelni, illetve lesznek jobb oldaliak, azokban pedig 1-esek.
             Objektum-orientált programozási nyelvekben erre a célra classt használunk.
             A C nyelvben erre a célra 'struktúrákat' használunk. 
        </para>
        <para>
             Szükség lesz egy olyan függvényre, amely képes új elemek létrehozására, a gyökér, és az egyes és nullás elemek számára.
        </para>
        <para>
            Az  'uj_elem()' függvény által vissza adott mutató által címzett helyre kerül ezáltal,
            értéke a speciális gyökér érték lesz. Ezt követően beállítjuk 'nullpointer'-re a gyökér által mutatott egyes, valamint nullás gyermeket.
            Végül a fa mutató a gyökérre fog mutatni.
        </para>
    </section>        
        
    <section>
        <title>Fabejárás</title>
        <para>
            Járd be az előző (inorder bejárású) fát pre- és posztorder is!
        </para>
        <para>
         Megoldás forrás: <link xlink:href="https://github.com/raddanfea/prog1/blob/master/lzw_v9">https://github.com/raddanfea/prog1/blob/master/lzw_v9</link>
        </para>
        <para>
            Preorder, inorder, és posztorder bejárások léteznek attól függően, hogy a gyökér-elem kiírása hol történik meg.          
        </para>
        <para>
             A preorder: először gyökér, majd egyes aztán nullás elemek.
        </para>
        <para>
             A posztorder: először egyes, majd nullás, aztán gyökér.              
        </para>
        
    </section>        
                        
    <section>
        <title>Tag a gyökér</title>
        <para>
            Az LZW algoritmust ültesd át egy C++ osztályba, legyen egy Tree és egy beágyazott Node
            osztálya. A gyökér csomópont legyen kompozícióban a fával!
        </para>
        <para>
         Megoldás forrás: <link xlink:href="https://github.com/raddanfea/prog1/blob/master/lzw_v9">https://github.com/raddanfea/prog1/blob/master/lzw_v9</link>
        </para>
        <para>
            
            A <![CDATA[kiFile << binFa]]> azt jelenti tagfüggvényként, hogy a kiFile valamilyen <![CDATA[std::ostream]]> stream osztály forrásába kellene beleírni ezt a tagfüggvényt, 
            amely ismeri a mi LZW binfánkat (<![CDATA[kiFile.operator<<(binFa)]]>).
            Globális függvényként pedig: <![CDATA[operator<<(kiFile, binFa)]]>.
            A bemenetet binárisan olvassuk, de a kimenő fájlt már karakteresen írjuk.

        </para>
    </section>        
                
    <section>
        <title>Mutató a gyökér</title>
        <para>
            Írd át az előző forrást, hogy a gyökér csomópont ne kompozícióban, csak aggregációban legyen a 
            fával!
        </para>
        <para>
         Megoldás forrás: <link xlink:href="https://github.com/raddanfea/prog1/blob/master/lzw_v9">https://github.com/raddanfea/prog1/blob/master/lzw_v9</link>
        </para>
        <para>
            A famutatót ráállítjuk a gyökérre a konstruktorban, amit alul hozunk létre.
            A gyökér is mutató lesz, ezért az előző forrásban mindenhol, ahol referenciaként adtuk át a gyökeret a famutatónak, referencia nélkül tesszük. 
            A konstruktorban a gyökének helyet foglalunk a memóriában és erre állítjuk a fát rá.
            A szabadításkor pont helyett nyilat használunk, ha mutató mutatóit kérjük.
        </para>
    </section>                     

    <section>
        <title>Mozgató szemantika</title>
        <para>
         Megoldás forrás: <link xlink:href="https://github.com/raddanfea/prog1/blob/master/lzw_v9">https://github.com/raddanfea/prog1/blob/master/lzw_v9</link>
        </para>
        <para>
            Írj az előző programhoz mozgató konstruktort és értékadást, a mozgató konstruktor legyen a mozgató
            értékadásra alapozva!
        </para>
        <para>
            A paraméterként átadott fa gyökerének az elemeit átadjuk az üres fának, majd a mozgatott fa elemeit kinullázzuk.
            Ezután az <function>std::move</function> függvénnyel átmozgatjuk az egyes
            elemeket, és végül kiírjuk az új fát.
            Az eredeti binFát már nem tudnánk kinyomni, mert azt nulláztuk.
        </para>
    </section>                     

</chapter>                
